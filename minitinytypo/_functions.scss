/**
 * Functions and mixins
 */

/**
 * Return a value from the Minitinytypo settings
 *
 * @access private
 * @param string $variable
 * @return mixed
 */
@function mtt($setting) {
  @if map-has-key($minitinytypo, $setting) {
    @return map-get($minitinytypo, $setting);
  }
  @warn "Setting `#{$setting}` not found in $minitinytypo.";
  @return null;
}

/**
 * Returns the font-size
 *
 * @access private
 * @return 
 */
@function mtt-font-size() {
  $base-font-size: mtt(font-size);
  @if mtt(font-size-factor) > 0 {
    $font-size-factor: mtt(font-size-factor) * 1vw;
    $font-size-fluid: calc(#{$base-font-size} + #{$font-size-factor});
    @return $font-size-fluid;
  }
  @return $font-size-base;
}

/**
 * Converts px to em
 *
 * @access private
 * @param int $pixels
 *     Taille en px
 * @param int $context
 *     Taille de police par d√©faut du navigateur
 * @return string
       Taille en em
 */
@function mtt-em($pixels, $context: 16) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1em;
}

/**
 * Returns the base vertical spacing
 *
 * @access public
 * @example
 * margin-top: spacing(2);
 */
@function spacing($factor: 1) {
  $spacing: null;
  // Shevy's built-in function takes the proximity factor into account
  @if (mtt(vertical-rythm)) {
    $spacing: base-spacing($factor);
  }
  // Otherise let's do the math ourselves
  @else {
    $spacing: mtt(font-size) * mtt(line-height) * $factor;
  }
  // Let's convert to rem
  //$spacing: $spacing * 1em / 1rem;
  @return $spacing;
}